#ifndef _OUTIL_H
#define _OUTIL_H
#include<iostream>
#include <fstream>
#include<cstdio>
#include<iomanip>
#include<sstream>
#include<algorithm>
#include <string>
#include <cstdlib>
#include <map>
#include <vector>
#include <limits> 
#include "Sommet.h"
using namespace std;
#define INFINITY std::numeric_limits<double>::max()
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction controle_dimension------------------------------------------------------------------------------------------------------------------------------------
/*
permet de savoir si le string saisi respecte les normes
@param le string line
reourne le booleen reponse montrant si la saisie a été correcte
*/
bool controle_dimension(string);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction controle_taille---------------------------------------------------------------------------------------------------------------------------------------
/*
permet de savoir si les dimensions du domaine en question sont des entiers naturels
@param le string line
reourne le booleen reponse montrant si la saisie a été correcte
*/
bool controle_taille(string);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction la_taille1--------------------------------------------------------------------------------------------------------------------------------------------
/*
renvoie le nombre de colonnes de l'univers
@param le string line
reourne le nombre de colonnes
*/
int la_taille1(string);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction la_taille2--------------------------------------------------------------------------------------------------------------------------------------------
/*
renvoie le nombre de lignes de l'univers
@param le string line
reourne le nombre de lignes
*/
int la_taille2(string);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction renvoyant l'abscisse d'un tresor----------------------------------------------------------------------------------------------------------------------
/*
renvoie l'abscisse d'un tésor
@param le string stockage,line 
reourne l'abscisse du trésor en question
*/
int abs_tresor(vector<Sommet>,string,int,int );
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction renvoyant l'ordonnée d'un tresor----------------------------------------------------------------------------------------------------------------------
/*
renvoie l'ordonnée d'un tésor
@param le string stockage,line 
reourne l'ordonnée du trésor en question
*/
int ordo_tresor(vector<Sommet>,string,int,int);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction vérifiant le nombre de portes-------------------------------------------------------------------------------------------------------------------------
bool controle_porte(vector<Sommet>);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction renvoyant l'abscisse de la porte----------------------------------------------------------------------------------------------------------------------
int abs_porte(vector<Sommet>);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction renvoyant ordonnée de la porte------------------------------------------------------------------------------------------------------------------------
int ord_porte(vector<Sommet>);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Fonction renvoyant le plus court chemin connaissant les coordonnées du point de depart celle du point d'arrivée------------------------------------------------
double court_chemin(vector<Sommet>,int,int,int ,int);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin suivant le chemin (x0,y0)-(x1,y1)-(x2,y2)-(x3,y3)-(X0.y0)-----------------------------------------------------------------------------------------
double cycle_tresor(vector<Sommet>,int,int,int,int,int ,int ,int ,int );
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------cas de tresor en une hauteur supérieure------------------------------------------------------------------------------------------------------------------------
bool tresor_infini(vector<Sommet>,int,int,int,int,int,int,int,int);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin suivant le chemin (x0,y0)-(x2,y2)-(x3,y3)-(X0.y0)-cas ou le tresor (x1,y1) est inaccessible-------------------------------------------------------
double cycle_tresor_infini1(vector<Sommet>,int,int,int,int,int,int);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin suivant le chemin (x0,y0)-------(x1,y1)-(X0.y0)-cas avec deux tresors inaccessibles---------------------------------------------------------------
void cycle_tresor_infini111(vector<Sommet>,int,int,int,int);
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin suivant le chemin (x0,y0)-------(x2,y2)-(X0.y0)-cas avec deux tresors inaccessibles---------------------------------------------------------------
void cycle_tresor_infini222(vector<Sommet>,int ,int,int ,int );
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin suivant le chemin (x0,y0)-------(x3,y3)-(X0.y0)-cas avec deux tresors inaccessibles---------------------------------------------------------------
void cycle_tresor_infini333(vector<Sommet>,int ,int ,int ,int);
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin  avec un tresor inaccessible----------------------------------------------------------------------------------------------------------------------
double cycle_tresor_affiche_bis_inffini1(vector<Sommet>,int,int,int,int,int,int);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin  avec un tresor 1 inaccessible----------------------------------------------------------------------------------------------------------------------
 void cycle_tresor_affiche_inffini23(vector<Sommet>,int,int,int,int,int,int);
 
 //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin  avec un tresor 2 inaccessible----------------------------------------------------------------------------------------------------------------------
 void cycle_tresor_affiche_inffini13(vector<Sommet>,int,int,int,int,int,int);

 //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin  avec un tresor 3 inaccessibles-------------------------------------------------------------------------------------------------------------------
 void cycle_tresor_affiche_inffini12(vector<Sommet>,int,int,int,int,int,int );
 	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin --------------------------------------------------------------------------------------------------------------------------------------------------
double cycle_tresor_affiche_bis(vector<Sommet>,int ,int ,int ,int,int ,int,int,int );

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------Affichage du court chemin suivant le parcourt dans le cas ou les trois trésors sont accessibles----------------------------------------------------------------
void cycle_tresor_affiche(vector<Sommet>,int ,int ,int ,int,int ,int,int,int );

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------court chemin  cas général--------------------------------------------------------------------------------------------------------------------------------------
void cycle_tresor_affiche_general(vector<Sommet>,int ,int ,int ,int,int ,int,int,int );


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------fonction ouverture- du fichier et affichage des resultats------------------------------------------------------------------------------------------------------
void ouverture(int,string);
#endif


